<html>
<meta name="viewport" content="user-scalable=no">
<HTA:APPLICATION
ID="objAddPrinter"
APPLICATIONNAME="Map_Printer"
SCROLL="no"
SINGLEINSTANCE="yes"
WINDOWSTATE="normal"
MAXIMIZEBUTTON="no"
MINIMIZEBUTTON="no"
SELECTION="no"
ICON="map.ico"
BORDER="DIALOG"
CONTEXTMENU="no"
>
<title>Map Printer</title>
<head>
<style>
body{
	background-color: buttonface;
	font-family: 'Segoe UI', Tahoma, Geneva, Verdana; 
	font-size: 8pt;
	margin-top: 2px;
	margin-left: 8px;
	margin-right: 3px;
	margin-bottom: 3px;
	filter:progid:DXImageTransform.Microsoft.Gradient(GradientType=1, StartColorStr='#F0F0F0', EndColorStr='#0F0F0F')
}

.button{
	font-family: 'Segoe UI', Tahoma, Geneva, Verdana; 
	font-size: 8pt;
	width: 50px;
}

.wmibutton{
	font-family: 'Segoe UI', Tahoma, Geneva, Verdana; 
	font-size: 8pt;
	width: 70px;
}

.bigger_button{
	font-family: 'Segoe UI', Tahoma, Geneva, Verdana; 
	font-size: 8pt;
	width: 110px;
}

textarea{
	font-family:'Segoe UI', Tahoma, Geneva, Verdana; 
	font-size: 8pt;
	margin-left: 3px;
	margin-right: 3px;
}

select{
	font-family:'Segoe UI', Tahoma, Geneva, Verdana; 
	font-size: 8pt;
	margin-left: 0px;
}
</style>


</head>
<script language="vbscript">
'---------------------------------------------------------------------------
' This HTA is based on Journeyman, http://blogs.ittoolbox.com/networking/journey.
' Able to view/map/remove and set default printer.
' User need to be login and have access right to the server for the HTA to work.
'---------------------------------------------------------------------------

'-------------------------
' Global State Variables
'-------------------------
' Hostname (key) : Prefix (Value) 
Dim g_strPrintServerDict : Set g_strPrintServerDict = CreateObject("Scripting.Dictionary") 

' Hostname (key) : Logged in status (Value)
Dim g_strPrintServerAccessDict : Set g_strPrintServerAccessDict = CreateObject("Scripting.Dictionary") 

' Printer ShareName (key) : Printer Description (Value)
Dim g_strPrintDescription : Set g_strPrintDescription = CreateObject("Scripting.Dictionary") 

' Hostname (key) :  ProcessOutputMonitor Object (Value) 
Dim printServerDict : Set printServerDict = CreateObject("Scripting.Dictionary") 

Dim strIntranetDNSSuffix, strPrinterToAdd
Dim timerID, strHTML, strPrintersToAdd

Dim monitorAddPrinter, monitorPrinterProc

allLoggedIn = True
totalPrinters = 0

'---------------------------------------------------------------------------
' Window_Onload
' This is the first script that runs when the window loads.
'---------------------------------------------------------------------------
Sub Window_Onload
	self.Focus()
	resizeWindow
	
	ButtonDisable True
	PleaseWait.style.visibility = "hidden"
	
	LoadConfigurationXMLFile
	CheckForServerLogin
End Sub

'---------------------------------------------------------------------------
' resizeWindow
'---------------------------------------------------------------------------
Sub resizeWindow
    const DESIGN_DPI = 96	'dots per inch
	const DESIGN_WIDTH  = 579	'pixels
    const DESIGH_HEIGHT = 425	'pixels
    
    'Begin code to resize the form based on users DPI setting.
    dim height_pixels, width_pixels
    dim WMI_service, item, items
	
    set WMI_service = GetObject("winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2")
    set items = WMI_service.ExecQuery("Select PixelsPerXLogicalInch,PixelsPerYLogicalInch from Win32_DesktopMonitor")
	
    for each item in items
        pixels_per_logical_inch_height = item.PixelsPerYLogicalInch
        pixels_per_logical_inch_width  = item.PixelsPerXLogicalInch
    next
	
	' Set size 
    width_pixels  = DESIGN_WIDTH / DESIGN_DPI * pixels_per_logical_inch_width
    height_pixels = DESIGH_HEIGHT / DESIGN_DPI * pixels_per_logical_inch_height
    Window.ResizeTo width_pixels, height_pixels
	
	' Spawn middle of the screen
	WindowLeft = (Window.screen.availWidth / 2 - DESIGN_WIDTH / 2  )  
	WindowTop  = (Window.screen.availHeight / 2 - DESIGH_HEIGHT / 2  )
	Window.moveTo WindowLeft, WindowTop
End Sub

'---------------------------------------------------------------------------
' CheckForIntranetNetwork
'
' Will self.close() if not connected to intranet
'---------------------------------------------------------------------------
Sub CheckForIntranetNetwork
	Dim allNetwordCards, objNetworkCard, objWMIService, intranetMatch
	intranetMatch = False
	
	Set objWMIService = GetObject("winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2") 
	Set colNetCards = objWMIService.ExecQuery ("Select DNSDomain From Win32_NetworkAdapterConfiguration Where IPEnabled = True") 
	
	i = 0
	For Each objNetCard in colNetCards
		i = i + 1
		if instr(1,objNetCard.DNSDomain,strIntranetDNSSuffix,vbTextCompare) Then
			intranetMatch = True
			exit for
		end if
	next
		
	if intranetMatch = False or i = 0 then
		printers_decription.InnerHTML = "<font color=""darkred"" style=""font-size:8pt;"">Not connected to " & LCase(strIntranetDNSSuffix) & "</font>"
		MsgBox "No access to " & LCase(strIntranetDNSSuffix) & " intranet." & vbNewLine & vbNewLine & "Please check your connection and try again.", vbCritical,"No Intranet Network Detected"
		self.close()
	else
		printers_decription.InnerHTML = "<font color=""darkred"" style=""font-size:9pt;"">Connected to " & LCase(strIntranetDNSSuffix) & " intranet. Please wait...</font>"
	End If
End Sub

'---------------------------------------------------------------------------
' LoadConfigurationXMLFile
'---------------------------------------------------------------------------
Sub LoadConfigurationXMLFile
	Set fso = CreateObject("Scripting.FileSystemObject")
	curDir = objShell.CurrentDirectory
	mapPrinterDir = curDir&"\Map Printer Config"
	
	If (fso.FileExists(mapPrinterDir & "\config.xml")) Then
		Dim ObjXML : Set ObjXML = CreateObject ("Microsoft.XMLDOM") 
		Dim fileinput, Root, NodeList, Msg, xmlHostname, xmlPrefix, fullpath 
		
		ObjXML.async = False  
		ObjXML.load(mapPrinterDir & "\config.xml")  
		Set Root = ObjXML.documentElement   
		Set NodeList = ObjXML.selectNodes("/CONFIGURATION/SERVER") 
		strIntranetDNSSuffix = ObjXML.selectNodes("/CONFIGURATION/INTRANETDNSSUFFIX")(0).Text
		On Error Resume Next
		For Each Elem In NodeList   
			Set xmlHostname = Elem.getElementsByTagName ("HOSTNAME") (0)  
			Set xmlPrefix= Elem.getElementsByTagName ("PREFIX") (0) 
			if Len(xmlHostname.Text) = 0 Then
				corruptAnswer = True
				Exit For
			Else
				g_strPrintServerDict.Add xmlHostname.Text, xmlPrefix.Text  
			End If
		Next
		
		self.setTimeout "CheckForIntranetNetwork", .5
	Else	
		corruptAnswer = True
	End If	
	
	If corruptAnswer Then
		CreateConfigFile
		LoadConfigurationXMLFile
	End If
End Sub

'---------------------------------------------------------------------------
' netUseProcess
'
' create a new process with net use command 
' to see what print server is currently connected
'---------------------------------------------------------------------------
Dim netUseProcess
Sub CheckForServerLogin
	Set netUseProcess = New ProcessOutputMonitor
		netUseProcess.Start "net use ", 0	
		
	for each printserver in g_strPrintServerDict.keys
		g_strPrintServerAccessDict.Add printserver, false
	next
	
	add_printers.InnerHTML = "<font color=""darkred"" style=""font-size:10pt; font-weight:Bold;"">Connecting to print server...</br></font>"
	printers_decription.InnerHTML = "<font color=""darkred"" style=""font-size:9pt;"">Please Wait...</font>"
	
	timerID = window.setInterval(GetRef("monitorNetUse"), 1)
End Sub

'---------------------------------------------------------------------------
' monitorNetUse
' to read and monitor the output of the net use command
' g_strPrintServerAccessDict (key=printserver) : (value=boolean for logged in)
'---------------------------------------------------------------------------
Sub monitorNetUse
	Dim buffer, keepRunning
    keepRunning = False
	
	buffer = netUseProcess.NextLine
	If Not IsEmpty( buffer ) Then 
		for each printserver in g_strPrintServerAccessDict.keys
			if InStr(1, buffer,printserver, VBTextCompare) then
				g_strPrintServerAccessDict(printserver) = true
			end if
		Next
        keepRunning = True
    Else 
        keepRunning = CBool( keepRunning Or netUseProcess.IsRunning )
    End If 
	
	If Not keepRunning Then 
        window.clearInterval( timerID )
        timerID = Empty

		for each printserver in g_strPrintServerAccessDict.keys
			if g_strPrintServerAccessDict(printserver) = false then
				allLoggedIn = false
				serverNotLoggedIn = serverNotLoggedIn & " " & printserver
			End if
		Next
		
		if allLoggedIn = false then
			MsgBox "Access Denied for the following server(s): " & vbNewLine & serverNotLoggedIn & "." & vbNewLine & vbNewLine & "Please Log in and try again.", vbCritical,"Access Denied"
			Set fso = CreateObject("Scripting.FileSystemObject")			
			If (fso.FileExists("Login_to_Print_Server.hta")) Then
				objShell.Run("Login_to_Print_Server.hta")
			end if
			window.close()
		else
			self.setTimeout "BuildPrinterList", .1
		End if		
    End If 
End Sub

'---------------------------------------------------------------------------
' CreateConfigFile
' create config.xml for server and prefix if missing or corrupted
'---------------------------------------------------------------------------
Sub CreateConfigFile
	dim outFile, configFileStream, sxml
	set fso=createobject("scripting.filesystemobject")
	curDir = objShell.CurrentDirectory
	mapPrinterDir = curDir&"\Map Printer Config"
	
	If Not fso.FolderExists(mapPrinterDir) Then
		fso.CreateFolder(curDir & "\Map Printer Config")
	end if
	
	outFile= mapPrinterDir & "\config.xml"

	sxml="<?xml version=""1.0"" encoding=""UTF-8"" ?>" & vbcrlf
	sxml=sxml & "<CONFIGURATION>" & vbcrlf
	sxml=sxml & vbtab & gensimpletype("INTRANETDNSSUFFIX","domain.com") & vbcrlf
	sxml=sxml & vbtab & "<SERVER>" & vbcrlf
	sxml=sxml & vbtab & vbtab & gensimpletype("HOSTNAME","Print Server 1") & vbcrlf
	sxml=sxml & vbtab & vbtab & gensimpletype("PREFIX","Printer Prefix 1") & vbcrlf	
	sxml=sxml & vbtab & "</SERVER>" & vbcrlf
	sxml=sxml & vbtab & "<SERVER>" & vbcrlf
	sxml=sxml & vbtab & vbtab & gensimpletype("HOSTNAME","Print Server 2") & vbcrlf
	sxml=sxml & vbtab & vbtab & gensimpletype("PREFIX","Printer Prefix 2") & vbcrlf	
	sxml=sxml & vbtab & "</SERVER>" & vbcrlf
	sxml=sxml & vbtab & "<SERVER>" & vbcrlf
	sxml=sxml & vbtab & vbtab & gensimpletype("HOSTNAME","Print Server 3") & vbcrlf
	sxml=sxml & vbtab & vbtab & gensimpletype("PREFIX","Printer Prefix 3") & vbcrlf
	sxml=sxml & vbtab & "</SERVER>" & vbcrlf
	sxml=sxml & "</CONFIGURATION>"
	
	set configFileStream=fso.opentextfile(mapPrinterDir & "\config.xml",2,true,-2)
	configFileStream.write sxml
	configFileStream.close
	set configFileStream=nothing
End Sub

'---------------------------------------------------------------------------
' gensimpletype
'
' For XML node cooking
'---------------------------------------------------------------------------
function gensimpletype(stag,stext)
    gensimpletype="<" & stag & ">" & stext & "</" & stag & ">"
end function

'---------------------------------------------------------------------------
' BuildPrinterList
'
' This is the start of building the select boxes for current
' network printers and the printers that are on the print server.
'---------------------------------------------------------------------------
sub BuildPrinterList
	GetPrinters

	strHTML = "<select style=""width:180px;"" id=""AddPrintersSelect"" name=""AddPrintersSelect"" onChange=""onChangePrintSelectDropDown"">"
	strHTML = strHTML & "<option value=""""" & ">" & "Select a Network Printer" & "<" & "/option>"

	strPrintersToAdd = ""
	
	' Create a dictionary Key:Item dynamically based on number of server in configuration
	' This will spawn processes to be runnning at the same time
	' A ProcessOutputMonitor Class will capture the output once the command done running
	for each printserver in g_strPrintServerDict.keys
		printServerDict.Add printserver, New ProcessOutputMonitor
		printServerDict(printserver).Start "net view " & printserver ,0
	next
	
	timerID = self.setInterval(GetRef("GetAllPrintersFromPrintServer"), 1)
end Sub

'---------------------------------------------------------------------------
' GetAllPrintersFromPrintServer
'
' This is the script that builds the drop down list of all the servers
' from the print server. It will check for the prefix of the printer before
' adding it.
'---------------------------------------------------------------------------
Sub GetAllPrintersFromPrintServer
	printers_decription.InnerHTML = "<font color=""darkred"" style=""font-size:9pt;"">Connected to " & LCase(strIntranetDNSSuffix) & " intranet. Searching for avaliable network printers...</font>"
	
	If allLoggedIn = True Then
		Dim buffer, keepRunning
		keepRunning = False
		
		For Each printserver in printServerDict.keys
			buffer = printServerDict(printserver).NextLine
			
			If Not IsEmpty( buffer ) Then 
				if Instr(buffer,g_strPrintServerDict(printserver)) Then
					strPrintersToAdd = "<option value=" & Chr(34) & "\\" & printserver & "\" & Trim(Split(buffer,"Print")(0)) & Chr(34) & ">" & "\\" & printserver & "\" & Trim(Split(buffer,"Print")(0))  & "<" & "/option>"& strPrintersToAdd
					
					totalPrinters = totalPrinters + 1
					g_strPrintDescription.Add "\\" & printserver & "\" & Trim(Split(buffer,"Print")(0)), Trim(Split(buffer,"Print")(1))
				end if
				keepRunning = True
			else
				keepRunning = CBool( keepRunning Or printServerDict(printserver).IsRunning )
			End If 
		Next
		
		add_printers.InnerHTML = "<font color=""darkred"" style=""font-size:10pt; font-weight:Bold;"">Searching... Found: " & totalPrinters & "</font>"
		 
		If Not keepRunning Then 
			self.clearInterval( timerID )
			timerID = Empty
			'alert("Done")
			
			strHTML = strHTML & strPrintersToAdd & "</select>"
			add_printers.InnerHTML = strHTML
			sortlist("AddPrintersSelect")
			printers_decription.InnerHTML = "<font color=""darkred"" style=""font-size:9pt;"">Please select a network printer...</font>"			
			ButtonDisable False
		End If 
	End If
end sub

'---------------------------------------------------------------------------
' QuitScript
'---------------------------------------------------------------------------
Sub QuitScript
	self.Close()
End Sub

'---------------------------------------------------------------------------
' GetPrinters
'
' This adds the network printers already connected to the
' workstation to the Current Network Printers selection box.
'---------------------------------------------------------------------------
Sub GetPrinters
	PleaseWait.InnerHTML = "<font color=""darkred"" style=""font-size:12pt; font-weight: Bold; color: Black;"">Refreshin connected printer list. Please wait.</font>"

	strComputer = "."

	Set objWMIService = GetObject _
	("winmgmts:\\" & strComputer & "\root\cimv2")
	Set colPrinters = objWMIService.ExecQuery _
	("Select * From Win32_Printer Where Network = TRUE")
	
	do while Printers.Length > 0
		Printers.Remove(0)
	loop

	For Each objPrinter in colPrinters
		Set objOption = Document.createElement("OPTION")

		objOption.Value = objPrinter.Name

		if objPrinter.ShareName <> "" then
			objOption.Text = objPrinter.ShareName
		else
			objOption.Text = objPrinter.Name
		end if

		if objPrinter.Default = True then
			objOption.Text = objOption.Text & " Default"
			objOption.Selected = True
		end if
		Printers.Add(objOption)
	Next
	
	Set colPrinters = objWMIService.ExecQuery _
	("Select * From Win32_Printer Where Name = 'Microsoft Print to PDF'")
	For Each objPrinter in colPrinters
		Set objOption = Document.createElement("OPTION")

		objOption.Value = objPrinter.Name
		objOption.Text = "MS Print to PDF"

		if objPrinter.Default = True then
			objOption.Text = objOption.Text & " Default"
			objOption.Selected = True
		end if
		Printers.Add(objOption)
	Next
	PleaseWait.InnerHTML = "<font color=""darkred"" style=""font-size:12pt; font-weight: Bold; color: Black;"">Please wait while your request is processed.</font>"
end Sub

'---------------------------------------------------------------------------
' onChangePrintSelectDropDown
'
' Display the description of the printer on change
'---------------------------------------------------------------------------
Sub onChangePrintSelectDropDown
	if AddPrintersSelect.SelectedIndex > 0 Then
		printers_decription.InnerHTML = "<font color=""darkred"" style=""font-size:9pt;"">Description: " & g_strPrintDescription(AddPrintersSelect.Value) & "</font>"
	else 	
		printers_decription.InnerHTML = "<font color=""darkred"" style=""font-size:9pt;"">Please select a network printer...</br></font>"
	End if
End Sub

'---------------------------------------------------------------------------
' ButtonDisable
'---------------------------------------------------------------------------
Sub ButtonDisable(Toggle)
	AddPrinterbutton.Disabled = Toggle
	RemovePrinterButton.Disabled = Toggle
	DefaultPrinterButton.Disabled = Toggle
	TestPrinterbutton.Disabled = Toggle
	PrinterPropertiesbutton.Disabled = Toggle
	Aboutbutton.Disabled = Toggle
End Sub

'---------------------------------------------------------------------------
' ShowWaitScript
'
' When the user presses the any button, disable all button and
' display the please wait block and then run the
' appropriate script.
'---------------------------------------------------------------------------
Sub ShowWaitScript(ActionToPerform)
	PleaseWait.style.visibility = "visible"
	ButtonDisable True
	Select Case ActionToPerform
	CASE "Add"
		self.setTimeout "AddPrinter", 0
	CASE "Remove"
		self.setTimeout "RemoveScript", 0
	CASE "Default"
		self.setTimeout "DefaultPrinterScript", 0
	CASE "TestPrint"
		self.setTimeout "TestPrint", 0
	CASE "Properties"
		self.setTimeout "PrinterProperties", 0
	CASE "AboutScript"
		self.setTimeout "AboutScript", 0
	CASE Else
		PleaseWait.style.Visibility = "hidden"
		ButtonDisable False
	end select
End Sub

'---------------------------------------------------------------------------
' AddPrinter
'
' When the user presses the Add Printer button, we check the
' textbox to see what Printer is being added and whether it is
' being set to the default.
'---------------------------------------------------------------------------
Sub AddPrinter
	if AddPrintersSelect.SelectedIndex = 0 then
		msgbox "You have to select a printer from list before one can be added.", 48, "Select Printer"
		PleaseWait.style.visibility = "hidden"
		ButtonDisable False
		exit sub
	end if

	strPrinterToAdd = AddPrintersSelect.Value
	i = 0
	do while i < Printers.Length
			if InStr(1, strPrinterToAdd,Printers.Item(i).Value, VBTextCompare) then
				msgbox "The printer is already connected.", 48, "Printer"
				PleaseWait.style.visibility = "hidden"
				ButtonDisable False
				printers_decription.InnerHTML = "<font color=""darkred"" style=""font-size:8pt;"">Please select a network printer...</br></font>"
				exit sub
			end if
			
		i = i + 1
	loop
	
	Set monitorAddPrinter = New ProcessOutputMonitor
	monitorAddPrinter.Start "cmd.exe /c rundll32 printui.dll,PrintUIEntry /q /in /n" & strPrinterToAdd , 1

	timerID = self.setInterval(GetRef("monitorAddPrinterProcess"), 100)
End Sub

'---------------------------------------------------------------------------
' monitorAddPrinterProcess
'
' To monitor the rundll32 process that adding the network printer
' After adding, it will prompt user if the added printer will be 
' set to default printer
'---------------------------------------------------------------------------
Sub monitorAddPrinterProcess
	Dim buffer, keepRunning
    keepRunning = False

    buffer = monitorAddPrinter.NextData
	PleaseWait.InnerHTML = "<font color=""darkred"" style=""font-size:12pt; font-weight: Bold; color: Black;"">Please wait while your request is processed.</font>"
	
    If Not IsEmpty( buffer ) Then 
        keepRunning = True
    Else 
        keepRunning = CBool( keepRunning Or monitorAddPrinter.IsRunning )
    End If 

    If Not keepRunning Then 
        window.clearInterval( timerID )
        timerID = Empty
		
		PleaseWait.InnerHTML = "<font color=""darkred"" style=""font-size:12pt; font-weight: Bold; color: Black;"">Refreshing printer list. Please wait.</font>"
		GetPrinters
		i = 0
		successAddprint = false
		do while i < Printers.Length
			if InStr(1, strPrinterToAdd,Printers.Item(i).Value, VBTextCompare) then
				successAddprint = true
				if (msgbox("Do you want to set this printer as your default?",292, "Set Default")) = 6 then
					Set monitorPrinterProc = New ProcessOutputMonitor
					monitorPrinterProc.Start "rundll32 printui.dll,PrintUIEntry /y /n" & AddPrintersSelect.Value , 0
					timerID = self.setInterval(GetRef("monitorPrinterProcess"), 100)
				end if	
				exit do				
			end if
			i = i + 1
		loop
			
		if not successAddprint then
			msgbox "Failed to connect to " & strPrinterToAdd & "." & vbNewLine  & vbNewLine  & "Did you clicked Cancel during installation?" & vbNewLine & "If not,	please make sure you are connected to the print server and your account have access rights to connect to the network printer, " & strPrinterToAdd & ".", 48, "Fail to add " & strPrinterToAdd & "."
		end if
		
		PleaseWait.style.visibility = "hidden"
		ButtonDisable False
		AddPrintersSelect.SelectedIndex = 0
		printers_decription.InnerHTML = "<font color=""darkred"" style=""font-size:8pt;"">Please select a network printer...</br></font>"
		PleaseWait.InnerHTML = "<font color=""darkred"" style=""font-size:12pt; font-weight: Bold; color: Black;"">Please wait while your request is processed.</font>"
    End If 
End Sub

'---------------------------------------------------------------------------
' monitorPrinterProcess
'
' To monitor the rundll32 process that running the action for at 
' the network printer: 
'		- set default
'		- remove single printer
'---------------------------------------------------------------------------
Sub monitorPrinterProcess
	Dim buffer, keepRunning
    keepRunning = False

    buffer = monitorPrinterProc.NextData

    If Not IsEmpty( buffer ) Then 
        keepRunning = True
    Else 
        keepRunning = CBool( keepRunning Or monitorPrinterProc.IsRunning )
    End If 

    If Not keepRunning Then 
        window.clearInterval( timerID )
        timerID = Empty
		PleaseWait.style.visibility = "hidden"
		ButtonDisable False
		GetPrinters
    End If 
End Sub

'---------------------------------------------------------------------------
' TestPrint
'---------------------------------------------------------------------------
Sub TestPrint
	If Printers.SelectedIndex = -1 then
		msgbox "You have to select a printer to test print.", 48, "Select Printer"

		PleaseWait.style.visibility = "hidden"
		ButtonDisable False
		exit sub
	end if
	
	' Check for multiple selection validation
	i = 0
	selected = 0
	do while i < Printers.Length
		if Printers.Item(i).Selected then
			selected = selected + 1
		end if
		i = i + 1
	
		if selected > 1 then
			msgbox "Only one printer can be selected to print a test page", 48, "Test Printer"
			Printers.SelectedIndex = 0
			PleaseWait.style.visibility = "hidden"
			ButtonDisable False
			exit sub
		end if
	loop
	
	if selected = 1 then
		objShell.run "rundll32 printui.dll,PrintUIEntry /q /k /n" & Printers.Item(Printers.SelectedIndex).Value
		
		MsgBox "Test printing request was sent to " & Printers.Item(Printers.SelectedIndex).Value
		PleaseWait.style.visibility = "hidden"	
		ButtonDisable False
	end if
End Sub

'---------------------------------------------------------------------------
' RemoveScript
'
' When the user presses the Remove Printer(s) button, we check
' the selection box to see what Printer(s) is being removed and
' whether it is set to the default. If it is the default, set
' another.
'---------------------------------------------------------------------------
dim delposition
Dim multiRemovalPrinterDic : Set multiRemovalPrinterDic = CreateObject("Scripting.Dictionary")
Sub RemoveScript
	if Printers.SelectedIndex = -1 then
		msgBox "You have to select a printer from list before one can be removed.", 48, "Select Printer"

		PleaseWait.style.visibility = "hidden"
		ButtonDisable False
		exit sub
	end if
	
	' No delete of local Microsoft Print to PDF
	If Printers.Item(Printers.SelectedIndex).Value = "Microsoft Print to PDF" then
		Msgbox "Unable to delete local printer " & Printers.Item(Printers.SelectedIndex).Text, vbCritical, "Remove Printer"
		PleaseWait.style.visibility = "hidden"
		ButtonDisable False
		Exit Sub
	end if

	' Check for multiple selection
	i = 0
	selected = 0
	do while i < Printers.Length
		if Printers.Item(i).Selected then
			selected = selected + 1
		end if
		i = i + 1
	loop
	
	' Single printer deletion
	if selected = 1 then
		PleaseWait.InnerHTML = "<font color=""darkred"" style=""font-size:7pt; color: Black;"">Removing "& vbNewLine  & Printers.Item(Printers.SelectedIndex).Value & "." & vbNewLine &  vbNewLine & "Please wait.</font>"
		Set monitorPrinterProc = New ProcessOutputMonitor
		monitorPrinterProc.Start "rundll32 printui.dll,PrintUIEntry /dn /n" & chr(34) & Printers.Item(Printers.SelectedIndex).Value & chr(34) , 0
		timerID = self.setInterval(GetRef("monitorPrinterProcess"), 100)
		Exit Sub
	end if 
	
	' Here is the start of calling of  recursive sub "monitorDeleteProccess"
	' Have to wait for the rundll32 to end before executing another rundll32.
	' We use dict to create the object class based on the number of selection
	' Print share name(key) : ProcessOutputMonitor Object (Value)
	i = 0
	Set multiRemovalPrinterDic = CreateObject("Scripting.Dictionary")
	do while i < Printers.Length
		if Printers.Item(i).Selected and StrComp(Printers.Item(i).Value, "Microsoft Print to PDF",vbTextCompare) then		
			' If default, set MS Print to PDF as default
			if Instr(Printers.Item(i).Value,"Default") Then
					monitorPrinterProc.Start "rundll32 printui.dll,PrintUIEntry /y /n" & chr(34) & "Microsoft Print to PDF" & chr(34) , 0
			end if
			
			multiRemovalPrinterDic.Add Printers.Item(i).Value, New ProcessOutputMonitor
		end if
		i = i + 1
	loop
	
	delposition=0
	multiRemovalPrinterDic.Items()(delposition).Start "rundll32 printui.dll,PrintUIEntry /q /dn /n" & chr(34) & multiRemovalPrinterDic.Keys()(delposition) & chr(34), 0		
	timerID = self.setInterval(GetRef("monitorDeleteProccess"), 400)
End Sub

'---------------------------------------------------------------------------
' monitorDeleteProccess
'---------------------------------------------------------------------------
Sub monitorDeleteProccess
	Dim buffer, keepRunning
    keepRunning = False

	PleaseWait.InnerHTML = "<font color=""darkred"" style=""font-size:7pt; color: Black;"">Removing printer: "& vbNewLine & multiRemovalPrinterDic.Keys()(delposition) & "." & vbNewLine &  vbNewLine & "Please wait.</font>"

    buffer = multiRemovalPrinterDic.Items()(delposition).NextData
    If Not IsEmpty( buffer ) Then 
        keepRunning = True
    Else 
        keepRunning = CBool( keepRunning Or  multiRemovalPrinterDic.Items()(delposition).IsRunning )
    End If 

    If Not keepRunning Then 
        window.clearInterval( timerID )
        timerID = Empty
		
		delposition = delposition + 1
		if delposition < multiRemovalPrinterDic.Count Then
			multiRemovalPrinterDic.Items()(delposition).Start "rundll32 printui.dll,PrintUIEntry /q /dn /n" & chr(34) & multiRemovalPrinterDic.Keys()(delposition) & chr(34), 0		
			timerID = self.setInterval(GetRef("monitorDeleteProccess"), 400)
		else 
			PleaseWait.style.visibility = "hidden"
			PleaseWait.InnerHTML = "<font color=""darkred"" style=""font-size:12pt; font-weight: Bold; color: Black;"">Please wait while your request is processed.</font>"
			ButtonDisable False
			GetPrinters
		End if
    End If 
End Sub

'---------------------------------------------------------------------------
' DefaultPrinterScript
'
' When the user presses the Set as Default button, we check the
' select box to see what Printer(s) is being set and make it the
' default. Then reorganize the list with JavaScript function below.
'---------------------------------------------------------------------------
sub DefaultPrinterScript
	If Printers.SelectedIndex = -1 then
		msgbox "You have to select a printer to make default before one can be set.", 48, "Select Printer"

		PleaseWait.style.visibility = "hidden"
		ButtonDisable False
		exit sub
	end if

	' Check for multiple selection
	i = 0
	selected = 0
	do while i < Printers.Length
		if Printers.Item(i).Selected then
			selected = selected + 1
		end if
		i = i + 1
	
		if selected > 1 then
			msgbox "Only one printer can be selected to set as default printer", 48, "Select Printer"
			Printers.SelectedIndex = 0
			PleaseWait.style.visibility = "hidden"
			ButtonDisable False
			exit sub
		end if
	loop
	
	' Have to wait for the rundll32 process to setting the printer as default to finish. 
	Set monitorPrinterProc = New ProcessOutputMonitor
	monitorPrinterProc.Start "rundll32 printui.dll,PrintUIEntry /y /n" & chr(34) & Printers.Item(Printers.SelectedIndex).Value & chr(34) , 0
	timerID = self.setInterval(GetRef("monitorPrinterProcess"), 1500)
end sub

'---------------------------------------------------------------------------
' PrinterProperties
'---------------------------------------------------------------------------
Sub PrinterProperties
	If Printers.SelectedIndex = -1 then
		msgbox "You have to select a printer to see the printer properties.", 48, "Select Printer"

		PleaseWait.style.visibility = "hidden"
		ButtonDisable False
		exit sub
	end if
	
	' Check for multiple selection
	i = 0
	selected = 0
	do while i < Printers.Length
		if Printers.Item(i).Selected then
			selected = selected + 1
		end if
		i = i + 1
	
		if selected > 1 then
			msgbox "Please select one printer to view the printer properties", 48, "Printer Properties"
			Printers.SelectedIndex = 0
			PleaseWait.style.visibility = "hidden"
			ButtonDisable False
			exit sub
		end if
	loop
	
	objShell.run "rundll32 printui.dll,PrintUIEntry /q /p /n" & chr(34) & Printers.Item(Printers.SelectedIndex).Value & chr(34)
	
	PleaseWait.style.visibility = "hidden"
	ButtonDisable False
End Sub

'---------------------------------------------------------------------------
' AboutScript
'---------------------------------------------------------------------------
Sub AboutScript
	PleaseWait.style.visibility = "hidden"
	MsgBox "Map Printer" & vbNewLine & vbNewLine & "By: ru-rararu-ra-rurararu-ra" & vbNewLine & vbNewLine & "For any techincal assitance, please call helpdesk for assistance. Thank you.", vbInformation, "About"
	ButtonDisable False
End Sub

</script>

<script type="text/vbscript" >
Class ProcessOutputMonitor
    Dim shell, fso, wmi
    Dim processID, retCode, processQuery
    Dim outputFile, inputFile

    Private Sub Class_Initialize
        Set fso     = CreateObject("Scripting.FileSystemObject")
        Set shell   = CreateObject("WScript.Shell")
        Set wmi     = GetObject("winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2")
        Set inputFile = Nothing 
    End Sub

    Private Sub Class_Terminate
        freeResources
    End Sub

    Public Default Function Start( ByVal commandLine , ByVal showWindowProc)
    Const SW_HIDE = 0
    Const SW_NORMAL = 1
    Const TemporaryFolder = 2
    Dim startUp

        Start = False
        If Not IsEmpty( processID ) Then Exit Function

        outputFile  = fso.BuildPath( _
            fso.GetSpecialFolder(TemporaryFolder) _ 
            , Left(CreateObject("Scriptlet.TypeLib").GUID,38) & ".tmp" _ 
        )

        ' "%comspec%" /c">"outputFile" command arguments "
        commandLine = Join( _ 
            Array( _ 
                quote(shell.ExpandEnvironmentStrings("%comspec%")) _ 
                , "/c"">" & quote(outputFile) _ 
                , commandLine _ 
                , """" _ 
            ) _ 
            , " " _ 
        )

        ' https://msdn.microsoft.com/en-us/library/aa394375%28v=vs.85%29.aspx
        Set startUp = wmi.Get("Win32_ProcessStartup").SpawnInstance_
        startUp.ShowWindow = showWindowProc

        retCode = wmi.Get("Win32_Process").Create( commandLine , Null, startUp, processID )
        If retCode <> 0 Then
            freeResources
            Exit Function 
        End If 

        processQuery = "SELECT ProcessID From Win32_Process WHERE ProcessID=" & processID 


        Start = True
    End Function 

    Public Property Get StartReturnCode
        StartReturnCode = retCode
    End Property 

    Public Property Get WasStarted
    End Property 

    Public Property Get PID
        PID = processID
    End Property 

    Public Property Get IsRunning()
        IsRunning = False 
        If Not IsEmpty( processID ) Then 
            If getWMIProcess() Is Nothing Then 
                processID = Empty
                freeResources
            Else 
                IsRunning = True
            End If 
        End If 
    End Property 

    Public Property Get NextLine
        NextLine = getFromInputFile("line")
    End Property 

    Public Property Get NextData
        NextData = getFromInputFile("all")
    End Property

    Private Function getFromInputFile( what )
    Const ForReading = 1
        getFromInputFile = Empty
        If Not IsEmpty( processID ) Then 
            If inputFile Is Nothing Then 
                If fso.FileExists( outputFile ) Then 
                    Set inputFile = fso.GetFile( outputFile ).OpenAsTextStream( ForReading )
                End If 
            End If 
            If Not ( inputFile Is Nothing ) Then 
                If Not inputFile.AtEndOfStream Then 
                    Select Case what
                        Case "line" :   getFromInputFile = inputFile.ReadLine()
                        Case "all"  :   getFromInputFile = inputFile.ReadAll()
                    End Select
                End If 
            End If 
        End If 
    End Function 

    Private Function quote( text )
        quote = """" & text & """"
    End Function 

    Private Function getWMIProcess()
    Const wbemFlagForwardOnly = 32
    Dim process
        Set getWMIProcess = Nothing
        If Not IsEmpty( processID ) Then 
            For Each process In wmi.ExecQuery( processQuery, "WQL", wbemFlagForwardOnly )
                Set getWMIProcess = process
            Next 
        End If 
    End Function 

    Private Sub freeResources()
    Dim process
        Set process = getWMIProcess()
        If Not ( process Is Nothing ) Then 
            process.Terminate
        End If 
        processID = Empty
        processQuery = Empty
        If Not ( inputFile Is Nothing ) Then 
            inputFile.Close
            Set inputFile = Nothing 
            fso.DeleteFile outputFile 
        End If 
    End Sub

End Class
</script>




<script language="JavaScript" type="text/javascript">
/*********************************************************************
* sortlist(ddlPrinters)
*
* This utilizes the built in Array.sort function of javascript
* to sort the list of printers so they will be displayed in an
* ascending order. Otherwise the printers are filled in wherever
* and difficult to find. The ddlPrinters variable must be a
* selectbox.
*********************************************************************/
function sortList(ddlPrinters) {
	var selectBox = document.getElementById(ddlPrinters);

	selectArray = new Array();

	if(selectBox.length < 2)
	{
		return;
	}

	for (i = 1; i < selectBox.length; i++) {
		selectArray[i] = new Array();
		selectArray[i][0] = selectBox.options[i].text;
		selectArray[i][1] = selectBox.options[i].value;
	}

	selectArray.sort();

	for (j = 0; j < selectBox.length - 1; j++) {
		selectBox.options[j+1].text = selectArray[j][0];
		selectBox.options[j+1].value = selectArray[j][1];
	}
}
</script>



<body onload="zoom()">
<table WIDTH="400" BORDER=1>
	<tr>
		<td VALIGN=TOP WIDTH=700 COLSPAN=2>
			<table BORDER=0>
				<tr>
					<td colspan=3>
						<div style="font-size:8pt;">Add Network Printers</div>
					</td>
				</tr>
			<tr>
				<td WIDTH=400 VALIGN=TOP>
					<span id="add_printers"></span>
				</td>
				<td>
					<input id=AddPrinterbutton class="bigger_button" type="button" value="Add Printer" style="font-weight:bold;" name="add_printer_button" onClick="ShowWaitScript('Add')">
				</td>
				<td>
					<input id=quitbutton class="button" style="background-color: DarkRed; color:White; font-weight:bold;" type="button" value="Quit" name="quit_button" onClick="QuitScript()">
				</td>
			</tr>
			<td colspan=3>
				<span id="printers_decription"></span>
			</td>
			</table>
		</td>
	</tr>

	<tr>
		<td WIDTH=700>
			<table BORDER=0>
				<tr>
					<td colspan=3>
						<div ID=header style="font-size:8pt;">Network Printers Connected</div>
					</td>
				</tr>
				<tr>
					<td align="top">
						<select id="Printers" name="Printers" multiple="multiple" size="13" style="width: 144px;">
						</select>
					</td>
					<td valign="top">
						<input id=RemovePrinterbutton class="bigger_button" type="button" value="Remove Printer(s)" style="font-weight:bold;" name="remove_printer_button" onClick="ShowWaitScript('Remove')">
						<br />
						<input id=DefaultPrinterbutton class="bigger_button" type="button" value="Set as Default" style="font-weight:bold;" name="set_default_printer_button" onClick="ShowWaitScript('Default')">
						<br />
						<input id=TestPrinterbutton class="bigger_button" type="button" value="Test Print" style="font-weight:bold;" name="set_test_printer_button" onClick="ShowWaitScript('TestPrint')">
					</td>
					<td valign="Top">
						<input id=PrinterPropertiesbutton class="bigger_button" type="button" value="Printer Properties" style="font-weight:bold;" name="printer_properties_button" onClick="ShowWaitScript('Properties')">
						<br /><br />
						<input id=Aboutbutton class="bigger_button" type="button" value="About" style="font-weight:bold;" name="About_button" onClick="ShowWaitScript('AboutScript')">
						<br />
						<br />
						<span id="PleaseWait" name="PleaseWait" style="font-size:12pt; font-weight: Bold; color: Black; visibility: hidden;">Please wait while your request is processed.</span>
					</td>
				</tr>
			</table>
		</td>
	</tr>
</table>
<SCRIPT LANGUAGE="VBScript">
Dim objShell, objOutput, objExec
Set objShell = CreateObject("WScript.Shell")
</SCRIPT>
<script type="text/javascript">
function zoom() {
	document.body.style.zoom = "135%";
}
</script>
</body>
</html>